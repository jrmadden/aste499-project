/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

// Defines the base CFD hex domain used in the snappHexMesh generation 
// Note that the parameters must be changed depending on the desired geometry

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
    // used with fullSystem
    
    (-0.02 -0.02 0)
    (0.33 -0.02 0)
    (0.33 0.02 0)
    (-0.02 0.02 0)
    (-0.02 -0.02 0.23)
    (0.33 -0.02 0.23)
    (0.33 0.02 0.23)
    (-0.02 0.02 0.23)
    
    // used  wiith reducedSystem
    /*
    (-0.02 -0.02 -0.001)
    (0.02 -0.02 -0.001)
    (0.02 0.02 -0.001)
    (-0.02 0.02 -0.001)
    (-0.02 -0.02 0.11)
    (0.02 -0.02 0.11)
    (0.02 0.02 0.11)
    (-0.02 0.02 0.11)
    */
);

blocks
(
    //hex (0 1 2 3 4 5 6 7) (4 4 12) simpleGrading (1 1 1)          // reducedSystem
    hex (0 1 2 3 4 5 6 7) (8 1 6) simpleGrading (1 1 1)        // fullSystem
);

boundary
(
    x0
    {
        type patch;
        faces ((1 2 6 5));
        neighbourPatch x1;
    }

    x1
    {
        type patch;
        faces ((0 4 7 3));
        neighbourPatch x0;
    }

    y0
    {
        type patch;
        faces ((2 3 7 6));
        neighbourPatch y1;
    }

    y1
    {
        type patch;
        faces ((0 1 5 4));
        neighbourPatch y0;
    }

    z0
    {
        type patch;
        faces ((4 5 6 7));
        neighbourPatch z1;
    }

    z1
    {
        type patch;
        faces ((0 3 2 1));
        neighbourPatch z0;
    }
);


mergePatchPairs
(
);


// ************************************************************************* //
